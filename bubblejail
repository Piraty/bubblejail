#!/bin/bash
# bubblejail - https://github.com/Piraty/bubblejail

__version__=0.5.0

usage() {
	cat <<'USAGE'
bubblejail [OPTIONS] [BWRAP_OPTIONS] COMMAND [ARGS] - run command in container

DESCRIPTION
	Run COMMAND [ARGS] in a sandbox by using the bubblewrap container setup
	utility (see: https://github.com/containers/bubblewrap/).

	The sandbox is configured to be most restrictive by default but allows for
	easy expansion on a per-application base.

	OPTIONS provide an easy way opt-in to common use-cases. They may optionally
	be followed by BWRAP_OPTIONS which will be appended as raw option to the
	actual bwrap call. Note that OPTIONS may not come after BWRAP_OPTIONS.

OPTIONS
  General options:

	--help
		Show this help

	--debug
		Show bwrap command line

	--rootfs <dir>
		Use this rootfs instead of /

  High-level options:

	--alsa
		Make alsa work

	--network
		Add network features. Currently equivalent with: --need-dns --need-nss
		--share-net

	--pulseaudio
		Make pulseaudio work

	--tor
		Torify the container (requires torsocks)

	--wayland
		Make Wayland work

	--x11
		Make X11 work

  Low-level options:

	--need-devfs         Mount new devtmpfs
	--need-procfs        Mount procfs

	--need-dns           Share /etc/resolv.conf with container
	--need-nss

	--ro <path>          bind <path> in the container (read-only)
	--rw <path>          bind <path> in the container

	--need-env-vars      see BUBBLEJAIL_ENV_WHITELIST below

	--share-all          Instead of creating all available namespaces, only
	                     create the mount namespace
	--share-ipc          Share the ipc namespace
	--share-net          Share the network namespace


ENVIRONMENT
  bubblejail respects the following environment variables

	BUBBLEJAIL_ENV_WHITELIST
		white-space separated list of variable names which are passed to the
		container

EXAMPLES
	bubblejail --x11 --uid 2222 sh -c 'id -u && xeyes'
	bubblejail --network --ro-bind $HOME/src /src ls /src
USAGE
}

print_deprecation_warning() {
	_flag="$1"
	_ver="$2"
	_alt="$3"
	printf '%s: %s\n' \
		"DEPRECATION WARNING" \
		"flag $_flag is scheduled for removal in version $_ver (use $_alt instead)"
}

echo_debug() {
	[ -n "$_debug" ] && printf '+ DEBUG %s\n' "$@"
}

if [ "$#" = "0" ]; then
	usage
	exit 1
fi

: "${HOME:="/home/$(id -un)"}"
: "${XAUTHORITY:="$HOME/.Xauthority"}"
: "${XDG_RUNTIME_DIR:="/run/user/$(id -u)/"}"

_debug=
_alsa=
_network=
_pulseaudio=
_rootfs=
_tor=
_wayland=
_x11=

_need_devfs=
_need_dev_path=
_need_dns=
_need_nss=
_need_procfs=
_need_env_vars=
_need_path_ro=
_need_path_rw=
_need_ns_all=
_need_ns_ipc=
_need_ns_net=

_bwrap_feature_args=

[ -n "$DEBUG" ] && _debug=y

while [ "$#" -gt 0 ]; do
	echo_debug "arg=$1"
	case "$1" in
		--help | -h)
			usage
			exit 0
			;;
		--debug) _debug=y ;;
		--alsa) _alsa=y ;;
		--network) _network=y ;;
		--pulseaudio) _pulseaudio=y ;;
		--rootfs)
			_rootfs="$2"
			shift
			;;
		--tor) _tor=y ;;
		--wayland) _wayland=y ;;
		--x11 | -X) _x11=y ;;
		--need-devfs) _need_devfs=y ;;
		--need-dns) _need_dns=y ;;
		--need-procfs) _need_procfs=y ;;
		--need-nss) _need_nss=y ;;
		--ro)
			_need_path_ro+=" $2"
			shift
			;;
		--rw)
			_need_path_rw+=" $2"
			shift
			;;
		--need-env-vars | -E)
			_need_env_vars="$_need_env_vars $2"
			shift
			;;
		--share-all) _need_ns_all=y ;;
		--share-net) _need_ns_net=y ;;
		--share-ipc) _need_ns_ipc=y ;;

		# deprecated options
		--need-netns)
			print_deprecation_warning "$1" 1.0.0 "--share-net"
			_need_ns_net=y
			;;
		*)
			echo_debug "stop option parsing"
			break
			;;
	esac

	shift
done

if [ "$_rootfs" ]; then
	[ -d "$_rootfs" ] || exit 1
	: # FIXME: prefix relevant mount operations with this rootfs
fi

# high-level options
if [ "$_alsa" ]; then
	# this is what strace reported, most is covered with /usr's bind-mount for now
	#/usr/etc/alsa/conf.d
	#/usr/share/alsa/alsa.conf
	#/usr/share/alsa/cards/aliases.conf
	#/usr/share/alsa/ctl/default.conf
	#/usr/share/alsa/pcm/default.conf
	#/usr/share/alsa/pcm/dmix.conf
	#/usr/share/alsa/pcm/dsnoop.conf
	#/var/lib/alsa/conf.d
	for _p in \
		/etc/alsa/conf.d \
		/etc/asound.conf \
		/usr/etc/asound.conf \
		"$HOME/.asoundrc" \
		"$HOME/.config/alsa/asoundrc"; do
		[ -r "$_p" ] && _need_path_ro+=" $_p"
	done
	_need_dev_path+=" /dev/snd"
	_need_env_vars+=" ALSA_CARD"

	# alsa needs audio group. fake it
	_etc_group="$(mktemp)"
	chmod 600 "$_etc_group"
	grep audio /etc/group >"$_etc_group"
	_bwrap_feature_args+=" --ro-bind $_etc_group /etc/group"
fi
if [ "$_network" ]; then
	_need_dns=y
	_need_ns_net=y
	_need_nss=y
fi
if [ "$_pulseaudio" ]; then
	_pulse_socket="$XDG_RUNTIME_DIR/pulse/native"
	[ -S "$_pulse_socket" ] && _need_path_rw+=" $_pulse_socket"
	_need_env_vars+=" XDG_RUNTIME_DIR"
fi
if [ "$_tor" ]; then
	_bwrap_feature_args+=" --ro-bind-try /etc/tor/torsocks.conf /etc/tor/torsocks.conf"
	_bwrap_feature_args+=" --dev-bind-try /dev/null /dev/null"
	set -- torsocks "$@"
fi
if [ "$_wayland" ]; then
	_need_env_vars+=" XDG_RUNTIME_DIR"
	_need_path_rw+=" $XDG_RUNTIME_DIR/${WAYLAND_DISPLAY:-wayland-0}"
fi
if [ "$_x11" ]; then
	_need_env_vars+=" DISPLAY"
	_need_env_vars+=" XAUTHORITY"
	_need_path_ro+=" $XAUTHORITY"
	for s in /tmp/.X11-unix/X?*; do
		_need_path_ro+=" $s"
	done
	_need_path_ro+=" /etc/fonts"
fi

# debian fixes
if [ -d /etc/alternatives ]; then
	_need_path_ro+=" /etc/alternatives"
fi

# mounts
if [ "$_need_devfs" ]; then
	_bwrap_feature_args+=" --dev /dev"
fi
if [ "$_need_procfs" ]; then
	_bwrap_feature_args+=" --proc /proc"
fi
if [ "$_need_dns" ]; then
	_bwrap_feature_args+=" --ro-bind /etc/resolv.conf /etc/resolv.conf"
fi
if [ "$_need_nss" ]; then
	_bwrap_feature_args+=" --ro-bind /etc/hosts /etc/hosts"
	_bwrap_feature_args+=" --ro-bind /etc/nsswitch.conf /etc/nsswitch.conf"
fi
if [ "$_need_path_ro" ]; then
	for p in $_need_path_ro; do
		_bwrap_feature_args+=" --ro-bind $p $p"
	done
fi
if [ "$_need_path_rw" ]; then
	for p in $_need_path_rw; do
		_bwrap_feature_args+=" --bind $p $p"
	done
fi
if [ "$_need_dev_path" ]; then
	for d in $_need_dev_path; do
		_bwrap_feature_args+=" --dev-bind $d $d"
	done
fi

# namespaces
if [ "$_need_ns_all" ]; then
	:
else
	# mimic `bwrap --unshare-all`
	# skip namespace creation for those requested for retention
	_bwrap_feature_args+=" --unshare-cgroup-try"
	[ "$_need_ns_ipc" ] || _bwrap_feature_args+=" --unshare-ipc"
	[ "$_need_ns_net" ] || _bwrap_feature_args+=" --unshare-net"
	_bwrap_feature_args+=" --unshare-pid"
	_bwrap_feature_args+=" --unshare-user-try"
	_bwrap_feature_args+=" --unshare-uts"
fi

# environment variables
for var in $BUBBLEJAIL_ENV_WHITELIST $_need_env_vars; do
	[ -n "$var" ] || continue
	val="${!var}"
	[ -n "$val" ] || continue
	_bwrap_feature_args+=" --setenv $var $val"
done

[ -n "$_debug" ] && set -x

#shellcheck disable=SC2086
exec env -i bwrap \
	--ro-bind ${_rootfs}/usr /usr \
	--symlink usr/lib /lib \
	--symlink usr/lib64 /lib64 \
	--symlink usr/bin /bin \
	--symlink usr/sbin /sbin \
	--tmpfs /run \
	--tmpfs /tmp \
	--tmpfs /var \
	--symlink /tmp var/tmp \
	--dir "$HOME" \
	--chdir "$HOME" \
	--new-session \
	--as-pid-1 \
	--die-with-parent \
	--setenv PATH /usr/bin \
	--setenv HOME "$HOME" \
	$_bwrap_feature_args \
	"$@"
